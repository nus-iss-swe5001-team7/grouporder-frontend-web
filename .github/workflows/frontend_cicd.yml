name: GroupOrder Frontkend CICD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    types: [opened, synchronize, reopened]

jobs:

  linting:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install after checking out code
        run: |
          npm install
      - name: run eslint
        run: |
          npm run lint

  #sast_owasp_odc:
  #  runs-on: ubuntu-latest

  #  strategy:
      matrix:
        node-version: [16.x]

  #  steps:
  #    - uses: actions/checkout@v4

  #    - name: Install Dependencies
  #      if: steps.cache-nodemodules.outputs.cache-hit != 'true'
  #      run: |
  #        npm ci --force
  #    - name: OWASP Dependency Check
  #      run: |
  #        wget https://github.com/jeremylong/DependencyCheck/releases/download/v9.1.0/dependency-check-9.1.0-release.zip
  #        unzip dependency-check-9.1.0-release.zip
  #    - name: Run scan with ODC
  #      run: |
  #        dependency-check/bin/dependency-check.sh --out . --scan . > ODC-report
  #    - name: Archive production artifacts
  #      uses: actions/upload-artifact@v4
  #      with:
  #        name: sast report
  #        path: |
  #          ./ODC-report
         

  #snyk:
  #  runs-on: ubuntu-latest
  #  permissions:
      # required for all workflows
  #    security-events: write
      # only required for workflows in private repositories
  #    actions: read
  #    contents: read
  #  steps:
  #    - name: Checkout repository
  #      uses: actions/checkout@v4

  #    - name: Run Snyk to check for vulnerabilities
  #      uses: snyk/actions/node@master
  #      continue-on-error: true # To make sure that SARIF upload gets called
  #      env:
  #        SNYK_TOKEN: ${{ secrets.SNYK_API_TOKEN }}
  #      with:
  #         args: --sarif-file-output=results.sarif
           
  deploy:
    #needs: [linting, sast_owasp_odc, snyk]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Vue.js project
        run: |
          npm install
          npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3
        run: |
          aws s3 sync ./dist s3://grouporder
          
  #zap_scan:
  #  needs: deploy
  #  runs-on: ubuntu-latest
  #  name: zap scan the web app
  #  steps:
  #    - name: Checkout
  #      uses: actions/checkout@v4
  #      with:
  #        ref: master
  #    - name: ZAP Scan
  #      uses: zaproxy/action-full-scan@v0.10.0
  #      with:
  #        token: ${{ secrets.GH_TOKEN_ZAP_SCAN}}
  #        docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
  #        target: ${{ secrets.WEB_APP_PROD_ADD }}

  #    - name: Archive staging artifacts
  #      uses: actions/upload-artifact@v4
  #      with:
  #        name: zap report
  #        path: |
  #          ./report_html.html